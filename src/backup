#!/bin/sh

LC_ALL=C
LANG=C

progname="$(basename "$0")"

config_file="${XDG_CONFIG_HOME:-$HOME/.config}/backup.conf"

tempf="$(mktemp)"		# to keep list of temporary files
tempfile () {
    mktemp | tee -a "$tempf"
}

clean_up () {
    # remove temporary files
    xargs -- rm -f < "$tempf"
    rm -f "$tempf"
}

trap "clean_up" 0
trap "exit 2" 1 2 3 15

error () {
    # write $1 to stderr
    printf -- "$progname: %s\n" "$1" 1>&2
}

usage () {
    # write help message to stdout
    cat <<EOF
usage: $progname OPTIONS [--] [OPERAND ...]
Make backups using find and tar.

Options:

 -o PATH  --orig=PATH  backup directory
 -d PATH  --dest=PATH  destination directory
 -x                    do not read any config file
 -n NAME  --name=NAME  backup name
          --help       show this help and exit

Any argument after "--" is passed unchanged to find(1).

$progname uses GNU find extensions.

EOF
}

conf () {
    # write contents (minus header) of config file section $1 to stdout
    if [ ! -e "$config_file" ]; then
	return 1
    fi
    cat "$config_file" | sed '/^#/ d; /^\[.*\]$/ i\
#' | awk -F'\n' -v RS='(^|\n)#\n' -v label="$1" \
	 '$1 == "[" label "]" { print }' | tail -n +2
}

human_friendly_units () (	# $1=amount in bytes
    # write string to stdout
    if [ $1 -lt 1024 ]; then
	printf '%dB\n' $1
    else
	KB=1024
	MB=$(($KB*1024))
	GB=$(($MB*1024))
	TB=$(($GB*1024))
	for unit in TB GB MB KB; do
	    eval "base=\$$unit"
	    if [ $1 -ge $base ]; then
		x=$((($1*10) / $base))
		break
	    fi
	done
	printf '%d.%d%s\n' $((x/10)) $((x%10)) $unit
    fi
)

ask () {			# $1=question $2=options
    # set REPLY
    # options: x=..|y=..
    while $(true); do
    	printf '%s [%s] ' "$1" "$2"
	stty cbreak
	REPLY=$(dd if=/dev/tty bs=1 count=1 2> /dev/null)
	stty -cbreak
	test "$REPLY" != "$(printf '\n')" && printf '\n'
	(
	    IFS='|'
	    for o in $2; do
		if [ "$REPLY" = "${o%%=*}" ]; then
		    printf '\n'
		    break
		fi
	    done
	) | grep ^ > /dev/null && return
    done
}

set_pars () {
    # set origin, destdir, noconf, name and restargs, from arg string $1
    origin=
    destdir=
    noconf=
    name=
    help=
    eval set -- "$1"
    while [ $# -gt 0 ]; do
	case "$1" in
	    --help)
		help=1;;
	    -o|--orig)
		shift; origin="$1";;
	    -d|--dest)
		shift; destdir="$1";;
	    -x)
		noconf=1;;
	    -n|--name)
		shift; name="$1";;
	    *)
		break;;
	esac
	shift
    done
    restargs="$(getopt -n "$progname" -s sh -o '' -- "$@")"
}

# process command line arguments
getopt -T 2> /dev/null
if [ $? -ne 4 ]; then
    error "unsupported version of getopt"
    return 1
fi
opts="o:d:xn:"
longopts="orig:,dest:,name:,help"
args="$(getopt -n "$progname" -s sh -o $opts -l $longopts -- "$@")"
[ $? -eq 0 ] || return 1

set_pars "$args" || exit
eval set -- "$restargs"
shift				# consume -- argument

[ -n "$help" ] && { usage; exit 0; }
[ -z "$name" ] && { error "name required"; exit 1; }

if [ -z "$origin" -a -z "$destdir" -a -z "$noconf" ]; then
    # set parameters using args from config file
    args="$(conf "$name" | xargs getopt -n "$progname" -s sh -o $opts -l $longopts -- -n "$name")" || exit
    set_pars "$args" || exit
    eval set -- "$restargs"
    shift
fi

# printf "help: %s\n" "$help"
# printf "origin: %s\n" "$origin"
# printf "destdir: %s\n" "$destdir"
# printf "noconf: %s\n" "$noconf"
# printf "name: %s\n" "$name"
# printf "other args --\n"
# printf "%s\n" "$@"
# exit

[ -z "$origin" ] && { error "origin path required"; exit 1; }
[ -z "$destdir" ] && { error "destination path required"; exit 1; }

[ -d "$destdir" ] || { error "no such directory: $destdir"; exit 1; }
[ -d "$origin" ] || { error "no such directory: $origin"; exit 1; }

filenames="$(tempfile)" || exit
filesizes="$(tempfile)" || exit

prev="$(cd "$destdir" && ls "${name}".* 2> /dev/null \
	| sort -V | tail -n 1)"
prevver="$(printf "%s\n" "$prev" | sed 's/.*\.\([0-9][0-9]*\)\.tar.*/\1/')"
if [ "$prevver" -eq "$prevver" ] 2> /dev/null ; then
    currver=$(($prevver+1))
    find -P "$origin" "$@" -newer "${destdir}/$prev" \
	 -fprint0 "$filenames" -printf "%s\n" > "$filesizes"
else
    currver=0
    find -P "$origin" "$@" -fprint0 "$filenames" -printf "%s\n" > "$filesizes"
fi
status=$?
if [ $status -ne 0 ]; then
   error "find exited with non-zero status: $status"
   exit $status
fi

originsize=$(awk -v x=0 '/./ {x=x+$1} END {print x}' < "$filesizes")
availspace=$((1024 * $(df -k -P "$destdir" \
			     | tail -n 1 | tr -s ' '| cut -d ' ' -f 4)))
outputfile="${destdir}/${name}.${currver}.tar.gpg"

if [ "$currver" -gt 0 ]; then
    printf "previous backup found\n"
else
    printf "no previous backup found\n"
fi

printf '%d file(s) (%s) will be backed up\n' \
    $(wc -l < "$filesizes") $(human_friendly_units $originsize)

printf "output file is: '%s'\n" "$(basename $outputfile)"
if [ -e "$outputfile" ]; then
    printf "output file already exists -- it will be OVERWRITTEN\n"
fi

printf "output directory is: '%s'\n" "$(dirname $outputfile)"
printf "%s available in output directory\n" \
       "$(human_friendly_units "$availspace")"

REPLY=
printf '\n'
while [ "$REPLY" != "y" ]; do
    ask 'proceed?' 'y=yes|n=no|v=view files'
    case "$REPLY" in
	v) tr '\0' '\n' < "$filenames" | less ;;
	n) exit 0
    esac
done

# run tar
tar --null --files-from "$filenames" --create \
    --no-recursion --preserve-permissions --totals \
    | gpg -c --force-mdc > "$outputfile"
status=$?
if [ $status -ne 0 ]; then
    error "an error occurred: $status"
    exit $status
fi
printf "bye.\n"
